--DATA COMBINING


DROP TABLE IF EXISTS "2022_tripdata.combined_data";

--Combining all the 12 months data tables into a single table containing data from Jan 2022 to Dec 2022.

CREATE TABLE IF NOT EXISTS "2022_tripdata.combined_data" AS (
	SELECT * FROM "2022_tripdata.202201_tripdata"
	UNION ALL
	SELECT * FROM "2022_tripdata.202202_tripdata"
	UNION ALL
	SELECT * FROM "2022_tripdata.202203_tripdata"
	UNION ALL
	SELECT * FROM "2022_tripdata.202204_tripdata"
	UNION ALL
	SELECT * FROM "2022_tripdata.202205_tripdata"
	UNION ALL
	SELECT * FROM "2022_tripdata.202206_tripdata"
	UNION ALL
	SELECT * FROM "2022_tripdata.202207_tripdata"
	UNION ALL
	SELECT * FROM "2022_tripdata.202208_tripdata"
	UNION ALL
	SELECT * FROM "2022_tripdata.202209_tripdata"
	UNION ALL
	SELECT * FROM "2022_tripdata.202210_tripdata"
	UNION ALL
	SELECT * FROM "2022_tripdata.202211_tripdata"
	UNION ALL
	SELECT * FROM "2022_tripdata.202212_tripdata"
	UNION ALL
);

--Checking no. of rows which are 5667717

SELECT COUNT(*)
FROM "2022_tripdata.combined_data";


--DATA EXPLORATION


--Checking the data types of all columns

SELECT
	column_name,
	data_type
FROM "2022_tripdata".INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = "combined_data";
​
--Checking for number of null values in all columns with SUM and CASE clause 

SELECT  COUNT(*) AS total_rows,

	SUM(CASE WHEN ride_id IS NULL THEN 1 ELSE 0 END) AS nulls_ride_id,
	SUM(CASE WHEN rideable_type IS NULL THEN 1 ELSE 0 END) AS nulls_rideable_type,
	SUM(CASE WHEN started_at IS NULL THEN 1 ELSE 0 END) AS nulls_started_at,
	SUM(CASE WHEN ended_at IS NULL THEN 1 ELSE 0 END) AS nulls_ended_at,
	SUM(CASE WHEN start_station_name IS NULL THEN 1 ELSE 0 END) AS nulls_start_station_name,
	SUM(CASE WHEN start_station_id IS NULL THEN 1 ELSE 0 END) AS nulls_ride_id,
	SUM(CASE WHEN end_station_name IS NULL THEN 1 ELSE 0 END) AS nulls_end_station_name,
	SUM(CASE WHEN end_station_id IS NULL THEN 1 ELSE 0 END) AS end_station_id,
	SUM(CASE WHEN start_lat IS NULL THEN 1 ELSE 0 END) AS nulls_start_lat,
	SUM(CASE WHEN start_lng IS NULL THEN 1 ELSE 0 END) AS nulls_start_lng,
	SUM(CASE WHEN end_lat IS NULL THEN 1 ELSE 0 END) AS nulls_end_lat,
	SUM(CASE WHEN end_lng IS NULL THEN 1 ELSE 0 END) AS nulls_end_lng,
	SUM(CASE WHEN member_casual IS NULL THEN 1 ELSE 0 END) AS nulls_member_casual,

FROM "2022_tripdata.combined_data";
​
--Checking for duplicate rows

SELECT COUNT(ride_id) - COUNT(DISTINCT ride_id) AS duplicate_rows
FROM "2022_tripdata.combined_data";

--ride_id - all have length of 16

SELECT 	LENGTH(ride_id) AS length_ride_id,
	COUNT(ride_id) AS no_of_rows
FROM "2022_tripdata.combined_data"
GROUP BY length_ride_id;

--rideable_type - There're 3 unique types of bikes

SELECT 	DISTINCT rideable_type,
	COUNT(rideable_type) AS no_of_trips
FROM "2022_tripdata.combined_data"
GROUP BY rideable_type;

--started_at, ended_at - TIMESTAMP - YYYY-MM-DD hh:mm:ss UTC

SELECT	started_at,
	ended_at
FROM "2022_tripdata.combined_data"
LIMIT 10;

--No. of columns with trips longer than a day

SELECT COUNT(*) AS longer_than_a_day
FROM "2022_tripdata.combined_data"
WHERE 	(
	EXTRACT(HOUR FROM (ended_at - started_at)) * 60 +
	EXTRACT(MINUTE FROM (ended_at - started_at)) +
	EXTRACT(SECOND FROM (ended_at - started_at)) / 60
	) >= 1440;						--longer than a day - total rows = 5360

--No. of columns with trips shorter than a minute

SELECT COUNT(*) AS less_than_a_minute
FROM "2022_tripdata.combined_data"
WHERE 	(
	EXTRACT(HOUR FROM (ended_at - started_at)) * 60 +
	EXTRACT(MINUTE FROM (ended_at - started_at)) +
	EXTRACT(SECOND FROM (ended_at - started_at)) / 60
	) <= 1;							--shorter than a minute - total rows = 122283

--start_station_name, start_station_id - total 833064 rows with both start station name and id missing

SELECT DISTINCT start_station_name
FROM "2022_tripdata.combined_data"
ORDER BY start_station_name;
​
SELECT COUNT(ride_id) AS rows_with_start_station_null			
FROM "2022_tripdata.combined_data"
WHERE start_station_name IS NULL OR start_station_id IS NULL;	-- return 833064 rows

--end_station_name, end_station_id - total 892742 rows with both end station name and id missing

SELECT DISTINCT end_station_name
FROM "2022_tripdata.combined_data"
ORDER BY end_station_name;

SELECT COUNT(ride_id) AS rows_with_null_end_station          
FROM "2022_tripdata.combined_data"
WHERE end_station_name IS NULL OR end_station_id IS NULL;	-- return 892742 rows

--end_lat, end_lng - total 5858 rows with both missing

SELECT COUNT(ride_id) AS rows_with_null_end_loc
FROM "2022_tripdata.combined_data"
WHERE end_lat IS NULL OR end_lng IS NULL;

--member_casual - 2 unique values - member and casual riders

SELECT 	DISTINCT member_casual, 
	COUNT(member_casual) AS no_of_trips
FROM "2022_tripdata.combined_data"
GROUP BY member_casual;


--DATA CLEANING


DROP TABLE IF EXISTS "2022_tripdata.cleaned_combined_data";

--Creating new table with clean data

CREATE TABLE IF NOT EXISTS "2022_tripdata.cleaned_combined_data" AS (
	SELECT 	a.ride_id, 
		rideable_type, 
		started_at, 
		ended_at, 
		ride_length,
	CASE EXTRACT(DAYOFWEEK FROM started_at) 
		WHEN 1 THEN 'SUN'
		WHEN 2 THEN 'MON'
		WHEN 3 THEN 'TUES'
		WHEN 4 THEN 'WED'
		WHEN 5 THEN 'THURS'
		WHEN 6 THEN 'FRI'
		WHEN 7 THEN 'SAT'    
	END AS day_of_week,
	CASE EXTRACT(MONTH FROM started_at)
		WHEN 1 THEN 'JAN'
		WHEN 2 THEN 'FEB'
		WHEN 3 THEN 'MAR'
		WHEN 4 THEN 'APR'
		WHEN 5 THEN 'MAY'
		WHEN 6 THEN 'JUN'
		WHEN 7 THEN 'JUL'
		WHEN 8 THEN 'AUG'
		WHEN 9 THEN 'SEP'
		WHEN 10 THEN 'OCT'
		WHEN 11 THEN 'NOV'
		wHEN 12 THEN 'DEC'
	END AS month,
		start_station_name, 
		end_station_name, 
		start_lat, 
		start_lng, 
		end_lat, 
		end_lng, 
		member_casual
	FROM "2022_tripdata.combined_data" a
	JOIN 	(
		SELECT ride_id, (
				EXTRACT(HOUR FROM (ended_at - started_at)) * 60 +
				EXTRACT(MINUTE FROM (ended_at - started_at)) +
				EXTRACT(SECOND FROM (ended_at - started_at)) / 60
				) AS ride_length
    		FROM "2022_tripdata.combined_data"
		) b 
	ON a.ride_id = b.ride_id
	WHERE 
		start_station_name IS NOT NULL AND
		end_station_name IS NOT NULL AND
		end_lat IS NOT NULL AND
		end_lng IS NOT NULL AND
		ride_length > 1 AND ride_length < 1440
);

-- set ride_id as primary key

ALTER TABLE "2022_tripdata.cleaned_combined_data"
ADD PRIMARY KEY(ride_id) NOT ENFORCED;

SELECT COUNT(ride_id) AS no_of_rows       
FROM "2022_tripdata.cleaned_combined_data";	-- returned 4,291,805 rows so 1,375,912 rows removed

--Creating a stored procedure to remove NULL records (for illustrative purposes)
--It contains potentially destructive operations that may lead to unintended consequences in an actual project

CREATE OR REPLACE PROCEDURE CleanDataProcedure AS
	BEGIN
    		DELETE FROM "2022_tripdata.combined_data"
    		WHERE 	start_station_name IS NULL OR
          		end_station_name IS NULL OR
          		end_lat IS NULL OR
          		end_lng IS NULL OR
          		ride_length <= 1 OR ride_length >= 1440;
	END;


--DATA ANALYSIS


--Bike types used by riders

SELECT	member_casual, 
	rideable_type,
	COUNT(*) AS total_trips
FROM "2022_tripdata.cleaned_combined_data"
GROUP BY member_casual, 
	 rideable_type
ORDER BY member_casual, 
	 total_trips;

--No. of trips per month

SELECT 	month,
	member_casual, 
	COUNT(ride_id) AS total_trips
FROM "2022_tripdata.cleaned_combined_data"
GROUP BY month, 
	 member_casual
ORDER BY member_casual;

--No. of trips per day of week

SELECT 	day_of_week, 
	member_casual, 
	COUNT(ride_id) AS total_trips
FROM "2022_tripdata.cleaned_combined_data"
GROUP BY day_of_week, 
	 member_casual
ORDER BY member_casual;

--No. of trips per hour

SELECT 	EXTRACT(HOUR FROM started_at) AS hour_of_day, 
	member_casual, 
	COUNT(ride_id) AS total_trips
FROM "2022_tripdata.cleaned_combined_data"
GROUP BY hour_of_day, 
	 member_casual
ORDER BY member_casual;

--Average ride_length per month

SELECT  month, 
	member_casual, 
	AVG(ride_length) AS avg_ride_duration
FROM "2022_tripdata.cleaned_combined_data"
GROUP BY month, 
	 member_casual;

--Average ride_length per day of week

SELECT  day_of_week, 
	member_casual, 
	AVG(ride_length) AS avg_ride_duration
FROM "2022_tripdata.cleaned_combined_data"
GROUP BY day_of_week, 
	 member_casual;

--Average ride_length per hour

SELECT  EXTRACT(HOUR FROM started_at) AS hour_of_day, 
	member_casual, 
	AVG(ride_length) AS avg_ride_duration
FROM "2022_tripdata.cleaned_combined_data"
GROUP BY hour_of_day, 
	 member_casual;

--Starting station locations

SELECT  start_station_name, 
	member_casual,
  	AVG(start_lat) AS start_lat, 
	AVG(start_lng) AS start_lng,
	COUNT(ride_id) AS total_trips
FROM "2022_tripdata.cleaned_combined_data"
GROUP BY start_station_name, 
	 member_casual;

--Ending station locations

SELECT  end_station_name, 
	member_casual,
	AVG(end_lat) AS end_lat, 
	AVG(end_lng) AS end_lng,
	COUNT(ride_id) AS total_trips
FROM "2022_tripdata.cleaned_combined_data"
GROUP BY end_station_name, member_casual;

--Ranking months on their average ride duration for each member type

WITH avg_ride_length_per_month AS (
	SELECT  month,
		AVG(ride_length) AS avg_ride_duration
    	FROM "2022_tripdata.cleaned_combined_data"
	GROUP BY month,
		 member_casual
)

SELECT month,
       member_casual,
       avg_ride_duration,
       RANK() OVER (PARTITION BY member_casual ORDER BY avg_ride_duration DESC) AS ride_duration_rank
FROM avg_ride_length_per_month;
